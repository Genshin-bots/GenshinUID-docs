import{_ as l}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.576d70b4.js";import{_ as t}from"./chunks/Badge.167f4610.js";import{_ as a,o as r,c as n,k as d,a as e,H as o,Q as s}from"./chunks/framework.d8868ba7.js";import"./chunks/commonjsHelpers.725317a4.js";const M=JSON.parse('{"title":"早柚协议","description":"","frontmatter":{},"headers":[],"relativePath":"CodeAdapter/Protocol.md","filePath":"CodeAdapter/Protocol.md","lastUpdated":1704123475000}'),p={name:"CodeAdapter/Protocol.md"},u={id:"早柚协议",tabindex:"-1"},_=d("a",{class:"header-anchor",href:"#早柚协议","aria-label":'Permalink to "早柚协议<Badge type="warning" text="稍难" />"'},"​",-1),g=s('<p><code>GenshinUID-core</code>（下简称 GsCore）使用 WebSocket 与各 Bot 平台的插件（下简称插件）进行通信。</p><p>WebSocket 消息均使用 text 类型的 UTF-8 编码的 JSON，数据包结构请参阅<a href="./Pack.html">下一节</a>。</p><h2 id="建立连接" tabindex="-1">建立连接 <a class="header-anchor" href="#建立连接" aria-label="Permalink to &quot;建立连接&quot;">​</a></h2><p>插件通过连接 GsCore 的 <code>/ws/{bot_id}</code> 路由建立连接。其中 <code>bot_id</code> 应替换为 Bot 平台的名称，如 <code>NoneBot2</code>。</p><h2 id="消息类型-message" tabindex="-1">消息类型 <code>Message</code> <a class="header-anchor" href="#消息类型-message" aria-label="Permalink to &quot;消息类型 `Message`&quot;">​</a></h2><p>消息由 <code>type</code> 和 <code>data</code> 两部分组成</p><p><code>type</code> 标识此消息的类型，目前有如下类型：</p><ul><li><code>text</code> 纯文本消息</li><li><code>markdown</code> MD消息</li><li><code>buttons</code> 按钮消息</li><li><code>image</code> 图片</li><li><code>image_size</code> 图片大小</li><li><code>file</code> 文件</li><li><code>at</code> 提及</li><li><code>reply</code> 回复</li><li><code>record</code> 音频</li><li><code>node</code> 合并转发</li></ul><p>此外，还有一种特殊的 <code>log_{level}</code> 类型，此类型仅存在于 <code>MessageSend</code> 包中，插件收到此消息，应按照 <code>level</code> 输出 <code>data</code> 中的内容</p><p><code>data</code> 为任意类型，上方列出的类型对应的 <code>data</code> 如下：</p><ul><li><p><code>text</code> 为文本内容</p></li><li><p><code>markdown</code>同样为文本内容（内容带MD格式）</p></li><li><p><code>buttons</code>是一个列表，里面可能的值为<code>Button[]</code>或为<code>Button</code></p><ul><li>如果值均为<code>Button</code>，则按照预先设定行列发送（例如<code>Nonebot2-qq</code>为默认两个按钮一行）</li><li>如果值均为<code>List[Button]</code>，则要按照列表为一行形式自定义发送 <ul><li>例如buttons=[[Button1,Button2], [Button3,Button4,Button5,Button6]]，则需要1和2为一行，3456为一行，两行的按钮</li></ul></li></ul></li><li><p><code>image</code> 为一个 <code>map</code>，内容如下</p><ul><li><code>type</code> (url|file|b64) 该图片的 <code>content</code> 类型：url/本地文件/base64</li><li><code>content</code> (string) 该图片内容 --&gt;</li></ul></li><li><p><code>image</code></p><ul><li>在 <code>MessageReceive</code> 中，一般为 url</li><li>在 <code>MessageSend</code> 中，为 base64（以<code>base64://</code>开头） <ul><li>如果以<code>link://</code>开头，则为url</li><li>适配器需要处理两种形式的image，防止出现core侧开启<code>发送图片自动转链接</code>时无法正确发送图片</li></ul></li></ul></li><li><p><code>file</code> 为 <code>string</code>，内容为 <code>{文件名}|{文件base64}</code></p></li><li><p><code>node</code> 为 <code>Message[]</code>（不允许嵌套 <code>node</code>）</p><ul><li>强烈不建议使用<code>node</code>类型，因为合并转发仅QQ有该发送方式</li><li>而在大多数平台上，只能遍历node中的消息分步发送</li></ul></li><li><p><code>reply</code> 为消息 id</p></li><li><p><code>at</code> 为被提及人的 id</p></li></ul><h2 id="上报消息" tabindex="-1">上报消息 <a class="header-anchor" href="#上报消息" aria-label="Permalink to &quot;上报消息&quot;">​</a></h2><p>Bot 平台接收到消息时，插件应向 core 发送 <code>MessageReceive</code> 包进行上报。</p><p><code>MessageReceive</code> 包内容如下：</p><ul><li><code>bot_id</code> (string) 聊天平台的 id，请与路由的 <code>bot_id</code> 进行区分</li><li><code>bot_self_id</code> (string) 机器人 id，对应聊天平台的机器人 id</li><li><code>msg_id</code> (string) 消息 id，对应聊天平台的消息 id</li><li><code>user_type</code> (<code>group</code>/<code>direct</code>/<code>channel</code>/<code>sub_channel</code>) 当前消息所属类型：群/私聊/频道/子频道</li><li><code>group_id</code> (string) <ul><li>当 <code>user_type</code> 为 <code>group</code> 时，此字段为群号（建议群、频道、房间全部使用group）</li><li>当 <code>user_type</code> 为 <code>channel</code> 时，此字段为频道号（废弃）</li><li>当 <code>user_type</code> 为 <code>sub_channel</code> 时，此字段为子频道号（废弃）</li><li>对于某些需要两个id确认发送目标的，建议使用<code>-</code>连接 <ul><li>例如米游社大别野，上报时，group_id建议为<code>villa_id + &quot;-&quot; + room_id</code></li><li>然后在发送侧处理分割即可</li></ul></li></ul></li><li><code>user_id</code> (string) 用户 id</li><li><code>user_pm</code> (integer) 用户权限，越小越高</li><li><code>content</code> (Message[]) 消息正文</li><li><code>sender</code>(Dictionary) 发送者的一些信息（<strong>于2023/11/6加入</strong>） <ul><li>里面的字段根据平台来看不固定，但是会尽可能的提供<code>nickname</code>和<code>avatar</code>字段，示例如下</li><li>{&#39;age&#39;: 0, &#39;area&#39;: &#39;&#39;, &#39;card&#39;: &#39;季落&#39;, &#39;level&#39;: &#39;&#39;, &#39;nickname&#39;: &#39;季落ξ( ✿＞◡❛)✨&#39;, &#39;role&#39;: &#39;owner&#39;, &#39;sex&#39;: &#39;unknown&#39;, &#39;title&#39;: &#39;&#39;, &#39;user_id&#39;: 3-------46, &#39;avater&#39;: &#39;<a href="http://q1.qlogo.cn/g?b=qq&amp;nk=123456789&amp;s=640" target="_blank" rel="noreferrer">http://q1.qlogo.cn/g?b=qq&amp;nk=123456789&amp;s=640</a>&#39;},</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">对 <code>user_pm</code> 的建议</p><p><code>user_pm</code> 建议 <code>&gt;=1</code>；</p><ul><li><p>对于聊天平台身份与 Bot 框架的权限有联系的（如各聊天平台的 SDK），建议遵循下面的聊天平台身份与 <code>user_pm</code> 的映射关系：</p><ul><li>对于 <code>group</code>： <ul><li>群主为 <code>2</code></li><li>群管理员为 <code>3</code></li><li>普通群员为 <code>6</code></li><li>如果存在更低的身份，则使用更低的 <code>user_pm</code></li></ul></li><li>对于 <code>channel</code> 和 <code>sub_channel</code>： <ul><li>频道主为 <code>2</code></li><li>当前频道的频道主为 <code>3</code></li><li>频道管理员为 <code>4</code></li><li>当前频道的管理员为 <code>5</code></li><li>普通成员为 <code>6</code></li><li>如果存在更低的身份，则使用更低的 <code>user_pm</code></li></ul></li><li>对于 <code>direct</code>，非超级用户始终为 <code>6</code></li><li>超级用户始终为 <code>1</code></li></ul></li><li><p>对于无直接联系的（如 Koishi.js），由高到低安排 <code>user_pm</code>，但有以下两条规定</p><ul><li>最高权限使用 <code>1</code></li><li>普通权限使用 <code>6</code></li></ul></li></ul></div><h2 id="发送消息" tabindex="-1">发送消息 <a class="header-anchor" href="#发送消息" aria-label="Permalink to &quot;发送消息&quot;">​</a></h2><p>当插件接收到 core 发送的 <code>MessageSend</code> 包时，需通过 Bot 平台提供的接口，向聊天平台发送消息。</p><ul><li><code>bot_id</code> (string) 聊天平台的 id，请与路由的 <code>bot_id</code> 进行区分</li><li><code>bot_self_id</code> (string) 机器人 id，对应聊天平台的机器人 id</li><li><code>msg_id</code> (string) 消息 id，对应聊天平台的消息 id</li><li><code>target_type</code> (string/null) 当前消息所属类型：群/私聊/频道/子频道</li><li><code>target_id</code> (string/null) 目标 id</li><li><code>content</code> (Message[]) 消息正文</li></ul><p><code>content</code> 中第 1 个元素为 <code>log</code> 类型的消息，则仅输出 log 即可</p>',20);function m(h,b,f,k,B,q){const c=t,i=l;return r(),n("div",null,[d("h1",u,[e("早柚协议"),o(c,{type:"warning",text:"稍难"}),e(),_]),o(i,{readTime:"4",words:"1.2k"}),g])}const S=a(p,[["render",m]]);export{M as __pageData,S as default};
